from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# üîë –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (–ó–ê–ú–ï–ù–ò –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø!)
TELEGRAM_TOKEN = "7945400830:AAHqPnOUwiFy3ntyhWh8Uila7Ut3O3MHdUQ"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
VERCEL_URL = "https://fenix-ai-bot-tau.vercel.app"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Vercel URL
GITHUB_REPO = "https://github.com/v9276556-svg"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TELEGRAM_TOKEN).build()

# üìä –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
user_data = {}

# üé® –ö–õ–ê–í–ò–ê–¢–£–†–´
def main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üöÄ –§—É–Ω–∫—Ü–∏–∏", callback_data="features")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üí° –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("üåê –°—Å—ã–ª–∫–∏", callback_data="links")]
    ]
    return InlineKeyboardMarkup(keyboard)

def features_keyboard():
    """–ö–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="create_note")],
        [InlineKeyboardButton("üéØ –ó–∞–¥–∞—á–∏", callback_data="tasks")],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar")],
        [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def links_keyboard():
    """–ö–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–æ–∫"""
    keyboard = [
        [InlineKeyboardButton("üåê Vercel –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=VERCEL_URL)],
        [InlineKeyboardButton("üíª GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", url=GITHUB_REPO)],
        [InlineKeyboardButton("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", url="https://core.telegram.org/bots/api")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def settings_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications")],
        [InlineKeyboardButton("üé® –¢–µ–º–∞", callback_data="theme")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# üåê FLASK ROUTES
@app.route('/')
def home():
    return jsonify({
        "status": "running",
        "service": "Fenix AI Bot",
        "deployment": "Vercel",
        "version": "2.0.0",
        "features": ["telegram_bot", "web_app", "api"]
    })

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "bot": "active"})

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    if request.method == 'POST':
        try:
            data = request.get_json()
            update = Update.de_json(data, application.bot)
            application.process_update(update)
            return jsonify({"status": "success"})
        except Exception as e:
            logger.error(f"Webhook error: {e}")
            return jsonify({"error": str(e)}), 400
    return jsonify({"status": "method not allowed"}), 405

# üí¨ TELEGRAM HANDLERS
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id] = {
        "name": user.first_name,
        "username": user.username,
        "start_count": user_data.get(chat_id, {}).get("start_count", 0) + 1
    }
    
    welcome_text = (
        f"‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!* ‚ú®\n\n"
        f"ü§ñ *Fenix AI Assistant* - —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
        f"üéØ *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"‚Ä¢ –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        f"üöÄ *–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞:* Vercel\n"
        f"üí° *–°—Ç–∞—Ç—É—Å:* 24/7 –æ–Ω–ª–∞–π–Ω\n\n"
        f"*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:* üëá"
    )
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "üìñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        "*–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:*\n"
        "–ü—Ä–æ–±–ª–µ–º—ã? –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    status_text = (
        "üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n"
        "üü¢ *–ë–æ—Ç:* –ê–∫—Ç–∏–≤–µ–Ω\n"
        "üü¢ *API:* –†–∞–±–æ—Ç–∞–µ—Ç\n"
        "üü¢ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* –í –ø–∞–º—è—Ç–∏\n"
        "üü¢ *–•–æ—Å—Ç–∏–Ω–≥:* Vercel\n\n"
        "üí° *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}\n"
        "–í–µ—Ä—Å–∏—è: 2.0.0\n\n"
        "üöÄ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
    )
    
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu"""
    await update.message.reply_text(
        "üéÆ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

# üîò CALLBACK HANDLERS
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user = query.from_user
    
    if data == "features":
        await query.edit_message_text(
            "üöÄ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=features_keyboard()
        )
    
    elif data == "status":
        user_count = user_data.get(query.message.chat_id, {}).get("start_count", 1)
        status_msg = (
            f"üìà *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name}\n"
            f"üÜî *ID:* `{user.id}`\n"
            f"üéØ *–ó–∞–ø—É—Å–∫–æ–≤:* {user_count}\n"
            f"üíæ *–ü–∞–º—è—Ç—å:* {len(user_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"üåê *–°–∏—Å—Ç–µ–º–∞:*\n"
            f"‚Ä¢ –ë–æ—Ç: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"‚Ä¢ Vercel: üü¢ –û–Ω–ª–∞–π–Ω\n"
            f"‚Ä¢ GitHub: üü¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"
        )
        await query.edit_message_text(status_msg, parse_mode='Markdown', reply_markup=main_menu_keyboard())
    
    elif data == "settings":
        await query.edit_message_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
            parse_mode='Markdown',
            reply_markup=settings_keyboard()
        )
    
    elif data == "help":
        help_msg = (
            "üí° *–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∏ –∑–∞–¥–∞—á\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n\n"
            "*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            f"‚Ä¢ Vercel: {VERCEL_URL}\n"
            f"‚Ä¢ GitHub: {GITHUB_REPO}\n\n"
            "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
        )
        await query.edit_message_text(help_msg, parse_mode='Markdown', reply_markup=main_menu_keyboard())
    
    elif data == "links":
        await query.edit_message_text(
            "üåê *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏*\n\n–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å–∞–º:",
            parse_mode='Markdown',
            reply_markup=links_keyboard()
        )
    
    elif data == "create_note":
        await query.edit_message_text(
            "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏*\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†\n\n"
            "–°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏!",
            parse_mode='Markdown',
            reply_markup=features_keyboard()
        )
    
    elif data == "tasks":
        await query.edit_message_text(
            "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*\n\n"
            "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†\n\n"
            "–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!",
            parse_mode='Markdown',
            reply_markup=features_keyboard()
        )
    
    elif data == "profile":
        user_info = user_data.get(query.message.chat_id, {})
        profile_msg = (
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
            f"*–ò–º—è:* {user.first_name}\n"
            f"*Username:* @{user.username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"*User ID:* `{user.id}`\n"
            f"*–ó–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞:* {user_info.get('start_count', 1)}\n"
            f"*–ß–∞—Ç ID:* `{query.message.chat_id}`\n\n"
            f"üíæ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏"
        )
        await query.edit_message_text(profile_msg, parse_mode='Markdown', reply_markup=settings_keyboard())
    
    elif data in ["back_main", "menu"]:
        await query.edit_message_text(
            "üéÆ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    
    else:
        await query.edit_message_text(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def setup_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("menu", menu_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Stylish Telegram Bot...")
    print(f"üåê Vercel URL: {VERCEL_URL}")
    print(f"üíª GitHub: {GITHUB_REPO}")
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    setup_handlers()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    application.run_polling()

if __name__ == '__main__':
    main()
