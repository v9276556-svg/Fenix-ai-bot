from flask import Flask, request, jsonify, render_template_string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîë –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
TELEGRAM_TOKEN = "7945400830:AAHqPnOUwiFy3ntyhWh8Uila7Ut3O3MHdUQ"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
VERCEL_URL = "https://fenix-ai-bot-tau.vercel.app"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Vercel URL
GITHUB_REPO = "https://github.com/v9276556-svg"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TELEGRAM_TOKEN).build()

# üìä –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# üé® –ö–†–ê–°–ò–í–´–ô HTML –î–ò–ó–ê–ô–ù
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ Fenix AI - Stylish Web App</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 3em;
            margin-bottom: 10px;
            font-weight: 700;
        }
        
        .header p {
            font-size: 1.3em;
            opacity: 0.9;
            margin-bottom: 20px;
        }
        
        .status-badge {
            display: inline-block;
            background: rgba(255,255,255,0.2);
            padding: 8px 20px;
            border-radius: 50px;
            font-size: 0.9em;
            margin: 10px 0;
        }
        
        .content {
            padding: 40px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        
        .stat-card {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            border-left: 5px solid #667eea;
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin: 40px 0;
        }
        
        .feature-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
            border: 2px solid #f1f3f4;
        }
        
        .feature-card:hover {
            transform: translateY(-5px);
            border-color: #667eea;
        }
        
        .feature-icon {
            font-size: 3em;
            margin-bottom: 20px;
        }
        
        .feature-title {
            font-size: 1.3em;
            font-weight: 600;
            margin-bottom: 15px;
            color: #2d3748;
        }
        
        .btn {
            display: inline-block;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 30px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 600;
            margin: 10px;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 1em;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
            color: white;
            text-decoration: none;
        }
        
        .btn-telegram {
            background: #0088cc;
        }
        
        .btn-github {
            background: #333;
        }
        
        .footer {
            text-align: center;
            padding: 30px;
            background: #f8f9fa;
            color: #6c757d;
            border-top: 1px solid #e9ecef;
        }
        
        .api-section {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            margin: 30px 0;
        }
        
        .code {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            margin: 15px 0;
            overflow-x: auto;
        }
        
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }
            
            .header h1 {
                font-size: 2.2em;
            }
            
            .content {
                padding: 20px;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Fenix AI</h1>
            <p>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è</p>
            <div class="status-badge">üöÄ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω | üí° –í–µ—Ä—Å–∏—è: 2.0.0</div>
        </div>
        
        <div class="content">
            <div style="text-align: center; margin-bottom: 30px;">
                <h2 style="color: #2d3748; margin-bottom: 15px;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fenix AI!</h2>
                <p style="font-size: 1.1em; color: #6c757d; max-width: 600px; margin: 0 auto;">
                    –ú–æ—â–Ω—ã–π Telegram –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ Vercel. 
                    –í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω, –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.
                </p>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{{ user_count }}</div>
                    <div>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">24/7</div>
                    <div>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">Vercel</div>
                    <div>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">2.0.0</div>
                    <div>–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</div>
                </div>
            </div>
            
            <div class="features">
                <div class="feature-card">
                    <div class="feature-icon">üí¨</div>
                    <div class="feature-title">–£–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç</div>
                    <p>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–Ω–æ–ø–æ–∫ –∏ –º–µ–Ω—é</p>
                    <a href="https://t.me/fenix_ai_test_bot" class="btn btn-telegram" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞</a>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">üåê</div>
                    <div class="feature-title">–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</div>
                    <p>–ö—Ä–∞—Å–∏–≤—ã–π –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ</p>
                    <a href="{{ vercel_url }}" class="btn">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</a>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">‚ö°</div>
                    <div class="feature-title">REST API</div>
                    <p>–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏</p>
                    <a href="{{ vercel_url }}/health" class="btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API</a>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">üîß</div>
                    <div class="feature-title">GitHub</div>
                    <p>–û—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–ø–ª–æ–∏</p>
                    <a href="{{ github_repo }}" class="btn btn-github" target="_blank">–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</a>
                </div>
            </div>
            
            <div class="api-section">
                <h3 style="color: #2d3748; margin-bottom: 20px;">üîó API Endpoints</h3>
                <div class="code">
                    GET {{ vercel_url }}/health<br>
                    ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
                </div>
                <div class="code">
                    GET {{ vercel_url }}/api/status<br>
                    ‚Üí –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
                </div>
                <div class="code">
                    POST {{ vercel_url }}/webhook<br>
                    ‚Üí Webhook –¥–ª—è Telegram –±–æ—Ç–∞
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 40px;">
                <h3 style="color: #2d3748; margin-bottom: 20px;">üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</h3>
                <a href="https://t.me/fenix_ai_test_bot?start=web" class="btn btn-telegram">–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º</a>
                <a href="{{ vercel_url }}/status" class="btn">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</a>
                <a href="https://core.telegram.org/bots/api" class="btn" target="_blank">–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
            </div>
        </div>
        
        <div class="footer">
            <p>¬© 2024 Fenix AI Assistant. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Telegram</p>
            <p style="margin-top: 10px; font-size: 0.9em;">
                <strong>Deployment:</strong> Vercel | 
                <strong>Framework:</strong> Flask | 
                <strong>Version:</strong> 2.0.0
            </p>
        </div>
    </div>
</body>
</html>
'''

# üé® –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –¢–ï–õ–ï–ì–†–ê–ú–ú
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üöÄ –§—É–Ω–∫—Ü–∏–∏", callback_data="features")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üí° –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("üåê –°—Å—ã–ª–∫–∏", callback_data="links")]
    ]
    return InlineKeyboardMarkup(keyboard)

def features_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="create_note")],
        [InlineKeyboardButton("üéØ –ó–∞–¥–∞—á–∏", callback_data="tasks")],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar")],
        [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def links_keyboard():
    keyboard = [
        [InlineKeyboardButton("üåê Vercel –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=VERCEL_URL)],
        [InlineKeyboardButton("üíª GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", url=GITHUB_REPO)],
        [InlineKeyboardButton("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", url="https://core.telegram.org/bots/api")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# üåê FLASK ROUTES
@app.route('/')
def home():
    return render_template_string(HTML_TEMPLATE, 
        user_count=len(user_data),
        vercel_url=VERCEL_URL,
        github_repo=GITHUB_REPO
    )

@app.route('/health')
def health():
    return jsonify({
        "status": "healthy",
        "service": "fenix_ai",
        "version": "2.0.0",
        "users_count": len(user_data),
        "deployment": "vercel"
    })

@app.route('/api/status')
def api_status():
    return jsonify({
        "web_app": "running",
        "telegram_bot": "running", 
        "users_count": len(user_data),
        "deployment": "vercel",
        "url": VERCEL_URL
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    if request.method == 'POST':
        try:
            data = request.get_json()
            update = Update.de_json(data, application.bot)
            application.process_update(update)
            return jsonify({"status": "success"})
        except Exception as e:
            logger.error(f"Webhook error: {e}")
            return jsonify({"error": str(e)}), 400
    return jsonify({"status": "method not allowed"}), 405

# üí¨ TELEGRAM HANDLERS (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    user_data[chat_id] = {
        "name": user.first_name,
        "username": user.username,
        "start_count": user_data.get(chat_id, {}).get("start_count", 0) + 1
    }
    
    await update.message.reply_text(
        f"‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!* ‚ú®\n\n"
        f"üåê *–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:* {VERCEL_URL}\n"
        f"üöÄ *–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!* –ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω!\n\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "status":
        await query.edit_message_text(
            f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n"
            f"*–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:* ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ\n"
            f"*URL:* {VERCEL_URL}\n"
            f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(user_data)}\n"
            f"*–ë–æ—Ç:* ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n\n"
            f"üí° –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ!",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    elif query.data == "links":
        await query.edit_message_text(
            "üåê *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏*\n\n–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:",
            parse_mode='Markdown',
            reply_markup=links_keyboard()
        )
    else:
        await query.edit_message_text(
            "üéÆ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

# üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_handler))

# –î–ª—è Vercel
if __name__ == '__main__':
    app.run(debug=True)
